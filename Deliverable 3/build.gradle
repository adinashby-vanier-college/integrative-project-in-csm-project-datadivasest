plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Load and apply the required JavaFX plugin.    
    id 'org.openjfx.javafxplugin' version '0.0.14'
}

def logbackVersion = "1.4.11"
def javafxVersion = "23.0.2"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

//-- Loads the JavaFX modules of the selected JavaFX version.
javafx {    
    version = "$javafxVersion"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.media' ]
}

dependencies {
    // JavaFX modules - needed at runtime!
    implementation "org.openjfx:javafx-base:$javafxVersion"
    implementation "org.openjfx:javafx-controls:$javafxVersion"
    implementation "org.openjfx:javafx-fxml:$javafxVersion"
    implementation "org.openjfx:javafx-graphics:$javafxVersion"
    implementation "org.openjfx:javafx-media:$javafxVersion"
    implementation 'junit:junit:4.13.1'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // Javadoc + sources (optional, for IntelliJ IDE only)
    compileOnly "org.openjfx:javafx-base:$javafxVersion:sources"
    compileOnly "org.openjfx:javafx-controls:$javafxVersion:sources"
    compileOnly "org.openjfx:javafx-fxml:$javafxVersion:sources"
    compileOnly "org.openjfx:javafx-graphics:$javafxVersion:sources"
    compileOnly "org.openjfx:javafx-base:$javafxVersion:javadoc"
    compileOnly "org.openjfx:javafx-controls:$javafxVersion:javadoc"
    compileOnly "org.openjfx:javafx-fxml:$javafxVersion:javadoc"
    compileOnly "org.openjfx:javafx-graphics:$javafxVersion:javadoc"

    // Other dependencies
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"

    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1'
}
// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}
application {       
   // TODO: Specify the fully-qualified name of the class 
   //       that contains the main method to be executed.
   mainClass = 'edu.vanier.Launcher'
    mainClass = 'edu.vanier.template.ui.MainMenu'
}
jar {
    manifest {
        attributes(
                'Main-Class': application.mainClass
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}